flags::String = args count == 2 => args at: 0 |=> ""
isDebug::Boolean = flags == "-d"

mut input = | args count
            | 2 => args at: 1 
            | 1 => args at: 0 
            | 0 => Error throwWithMessage: "Please specify input file" 
            |=> Error throwWithMessage: "Too many arguments" 

file = File path: input
input <- file readText

isDebug => "debug mode enabled" echo 

"Starting lexer" echo
lexer = Lexer input: input
ast = AST empty
[lexer ch != '\u0000'] whileTrue: [
    tok = lexer nextToken
    isDebug => [ tok kind echo ]
    ast append: tok
]
isDebug => [ ast print ]

"Starting parser" echo
astc = ASTC empty
parser = Parser ast: ast
[parser tok kind != TokenType.EOF] whileTrue: [
    command = parser nextToken
    isDebug => [ command kind echo ]
    astc append: command
]
isDebug => [ astc print ]

"Starting interpreter" echo
interpreter = Interpreter ast: astc
errHandle = ErrorHandler name: "Interpreter"
mut error = false
[interpreter cmd kind != TokenType.EOF && error != true] whileTrue: [
    res = interpreter nextCommand
    isDebug => [ interpreter cmd kind echo ]
    res isSuccess ifFalse: [
        errHandle handle: res
        error <- true
    ]
]


// "Starting compiler" echo
// compiler = ECompiler ast: astc
// errHandle = ErrorHandler name: "Compiler"
// error = false
// [compiler cmd kind != TokenType.EOF && error != true] whileTrue: [
//     res = compiler nextCommand
//     isDebug => [ compiler cmd kind echo ]
//     isSuccess = res isSuccess
//     isSuccess ifFalse: [
//         errHandle handle: res
//         error = true
//     ]
// ]
