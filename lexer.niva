type Lexer
    input: String
    pos: Int
    readPos: Int
    ch: Char

constructor Lexer input::String = [
    l = Lexer input: input pos: 0 readPos: 0 ch: '0'
    l readChar
    ^l
]

Char isWhitespace -> Boolean = ^ (this == ' ') || (this == '\t') || (this == '\n') || (this == '\r')

Lexer readChar = [
    readPos >= input count =>
        ch <- '\u0000' |=>
        ch <- input at: readPos
    
    pos <- readPos
    readPos <- readPos inc
]

Lexer peekChar -> Char = [
    ^this readPos >= input count
    => '\u0000'
    |=> input at: (.readPos)
]

Lexer nextToken -> Token = [
    .skipWhiteSpaces
    tok = | ch
    | '+' => [Token kind: TokenType.INC]
    | '-' => [Token kind: TokenType.DEC]
    | '>' => [
        this peekChar == '>' => [
            this readChar
            Token kind: TokenType.PUSH
        ] |=> Token kind: TokenType.MOVR
    ]
    | '<' => [
        this peekChar == '<' => [
            this readChar
            Token kind: TokenType.POP 
        ] |=> Token kind: TokenType.MOVL
    ]
    | '.' => [
        this peekChar isWhitespace => [
            this readChar
            Token kind: TokenType.IN
        ] |=> [
            this readChar
            Token kind: TokenType.FILE
        ]
    ]
    | '=' => [Token kind: TokenType.OUT]
    | '\'' => [Token kind: TokenType.READ]
    | '"' => [Token kind: TokenType.READPOS]
    | ',' => [Token kind: TokenType.WRITE]
    | '[' => [Token kind: TokenType.LOOPB]
    | ']' => [Token kind: TokenType.LOOPE]
    | 'D' => [
        this peekChar == 'P' => [
            this readChar
            this peekChar == 'N' => [
                this readChar
                this peekChar == 'D' => [
                    this readChar
                    Token kind: TokenType.DPND
                ] |=> Token kind: TokenType.INVALID
            ] |=> Token kind: TokenType.INVALID
        ] |=> Token kind: TokenType.INVALID
    ]
    | '%' => [Token kind: TokenType.DPNDCALL]
    | '#' => [Token kind: TokenType.CREATELABEL]
    | '!' => [
        this peekChar == '#' => [
            this readChar
            Token kind: TokenType.DELETELABEL
        ] |=> Token kind: TokenType.INVALID
    ]
    | '@' => [Token kind: TokenType.JUMPLABEL]
    | '/' => [
        this peekChar == '*' => [
            this readChar
            Token kind: TokenType.COMMENTB
        ] |=> Token kind: TokenType.INVALID
    ]
    | '*' => [
        this peekChar == '/' => [
            this readChar
            Token kind: TokenType.COMMENTE
        ] |=> Token kind: TokenType.INVALID
    ]
    | 'E' => [
        this peekChar == 'N' => [
            this readChar
            this peekChar == 'D' => [
                this readChar
                Token kind: TokenType.END
            ] |=> Token kind: TokenType.INVALID
        ] |=> Token kind: TokenType.INVALID
    ]
    | '\u0000' => [Token kind: TokenType.EOF]
    |=> [
        ch isLetter => [
            lit = this readIdentifier
            ^ Token literal: lit kind: TokenType.ALIAS
        ] |=> [Token kind: TokenType.INVALID]
    ]

    .readChar
    ^ tok
]

Lexer readIdentifier -> String = [
  localPos = pos
  [ch isLetter] whileTrue: [
    .readChar
  ]
  result = input slice: localPos..<pos
  ^result
]

Lexer skipWhiteSpaces = [
    [(ch == ' ') || (ch == '\t') || (ch == '\n') || (ch == '\r')] whileTrue: [
        .readChar
    ]
]