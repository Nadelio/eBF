type Parser
    ast: AST
    tok: Token
    pos: Int
    readPos: Int

constructor Parser ast::AST = [
    token = Token kind: TokenType.INVALID
    p = Parser ast: ast tok: token pos: 0 readPos: 0
    p readToken
    ^p
] 

Parser readToken = [
    readPos >= ast tokens count =>
        tok <- Token kind: TokenType.EOF |=> 
        tok <- ast tokens at: readPos

    pos <- readPos
    readPos <- readPos inc
]

Parser peekToken -> Token = [
    ^this readPos >= ast tokens count =>
    Token kind: TokenType.EOF |=>
    ast tokens at: (.readPos)
]

Parser nextToken -> Command = [
    cmd = | tok kind
    | TokenType.INC => [UnaryCommand kind: TokenType.INC]
    | TokenType.DEC => [UnaryCommand kind: TokenType.DEC]
    | TokenType.MOVR => [UnaryCommand kind: TokenType.MOVR]
    | TokenType.MOVL => [UnaryCommand kind: TokenType.MOVL]
    | TokenType.PUSH => [UnaryCommand kind: TokenType.PUSH]
    | TokenType.POP => [UnaryCommand kind: TokenType.POP]
    | TokenType.IN => [UnaryCommand kind: TokenType.IN]
    | TokenType.OUT => [UnaryCommand kind: TokenType.OUT]
    | TokenType.READ => [UnaryCommand kind: TokenType.READ]
    | TokenType.READPOS => [UnaryCommand kind: TokenType.READPOS]
    | TokenType.WRITE => [UnaryCommand kind: TokenType.WRITE]
    | TokenType.LOOPB => [UnaryCommand kind: TokenType.LOOPB]
    | TokenType.LOOPE => [UnaryCommand kind: TokenType.LOOPE]
    | TokenType.INVALID => [UnaryCommand kind: TokenType.INVALID]
    | TokenType.END => [UnaryCommand kind: TokenType.END]
    | TokenType.EOF => [UnaryCommand kind: TokenType.EOF]
    | TokenType.DPND => [
        mut fileName = ""
        this peekToken kind == TokenType.ALIAS => [
            this readToken
            fileName <- fileName + tok literal
            this peekToken kind == TokenType.FILE => [
                this readToken
                fileName <- fileName + tok literal
                this peekToken kind == TokenType.ALIAS => [
                    this readToken
                    fileName <- fileName + tok literal
                    this peekToken kind == TokenType.ALIAS => [
                        this readToken
                        DPND fileName: fileName alias: tok literal kind: TokenType.DPND
                    ] |=> UnaryCommand kind: TokenType.INVALID
                ] |=> UnaryCommand kind: TokenType.INVALID
            ] |=> UnaryCommand kind: TokenType.INVALID
        ] |=> UnaryCommand kind: TokenType.INVALID
    ]
    | TokenType.DPNDCALL => [
        this readToken
        BinaryCommand kind: TokenType.DPNDCALL alias: tok literal
    ]
    | TokenType.CREATELABEL => [
        this readToken
        BinaryCommand kind: TokenType.CREATELABEL alias: tok literal
    ]
    | TokenType.JUMPLABEL => [
        this readToken
        BinaryCommand kind: TokenType.JUMPLABEL alias: tok literal
    ]
    | TokenType.COMMENTB => [
        mut peekedTok = this peekToken
        [peekedTok kind != TokenType.COMMENTE || (pos >= ast tokens count)] whileTrue: [
            this readToken
            peekedTok <- this peekToken
        ]
        UnaryCommand kind: TokenType.COMMENT
    ]
    | TokenType.DELETELABEL => [
        this readToken
        BinaryCommand kind: TokenType.DELETELABEL alias: tok literal
    ]
    |=> UnaryCommand kind: TokenType.INVALID

    .readToken
    ^cmd 
]