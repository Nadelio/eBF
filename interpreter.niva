type Interpreter
    ast: ASTC
    cmd: Command
    pos: Int
    readPos: Int
    dpndMap: MutableMap(String, File)
    labelMap: MutableMap(String, Int)
    pointerValue: Int
    pointerPosition: Int
    tape: MutableList::Int
    stack: MutableList::Int

constructor Interpreter ast::ASTC = [
    cmd = UnaryCommand kind: TokenType.INVALID //! Niva bug here, not proper error
    tape::MutableList::Int = 0..65535 |> toMutableList
    stack::MutableList::Int = {}

    i = Interpreter
            ast: ast
            cmd: cmd
            pos: 0
            readPos: 0
            dpndMap: #{}
            labelMap: #{}
            pointerValue: 0
            pointerPosition: 0
            tape: tape
            stack: stack

    i readCommand
    ^i
]

Interpreter readCommand = [
    readPos >= ast commands count =>
        cmd <- UnaryCommand kind: TokenType.EOF |=> 
        cmd <- ast commands at: readPos

    pos <- readPos
    readPos <- readPos inc
]

Interpreter peekCommand -> Command = [
    ^this readPos >= ast commands count =>
    UnaryCommand kind: TokenType.EOF |=>
    ast commands at: (.readPos)
]

Interpreter readLastCommand = [
    readPos >= 0 =>
        cmd <- UnaryCommand kind: TokenType.EOF |=> 
        cmd <- ast commands at: readPos dec

    pos <- readPos
    readPos <- readPos dec
]

Interpreter peekLastCommand -> Command = [
    ^this readPos >= 0 =>
    UnaryCommand kind: TokenType.EOF |=>
    ast commands at: (.readPos dec)
]

File runDependency -> Result = [
    lexer = Lexer input: (this readText)
    ast = AST empty
    [lexer ch != '\u0000'] whileTrue: [
        tok = lexer nextToken
        ast append: tok
    ]

    astc = ASTC empty
    parser = Parser ast: ast
    [parser tok kind != TokenType.END] whileTrue: [
        command = parser nextToken
        astc append: command
    ]

    interpreter = Interpreter ast: astc
    eop = UnaryCommand kind: TokenType.END
    [interpreter cmd kind != eop kind] whileTrue: [
        suc = Success value: true
        res = interpreter nextCommand
        res != suc ifFalse: [
            
        ]
    ]

    ^ Success value: true
]

Interpreter nextCommand -> Result! = [
    //! for loops, DO NOT TOUCH
    mut c = 0

    cmd = cmd
    result = | cmd
    | UnaryCommand => [
        | cmd kind
        | TokenType.INC => [
            pointerValue <- pointerValue inc
            Success value: true
        ]
        | TokenType.DEC => [
            pointerValue <- pointerValue dec
            Success value: true
        ]
        | TokenType.MOVR => [
            pointerPosition <- pointerPosition inc
            pointerPosition >= tape count => pointerPosition <- 0
            Success value: true
        ]
        | TokenType.MOVL => [
            pointerPosition <- pointerPosition dec
            pointerPosition < 0 => pointerPosition <- tape count - 1
            Success value: true
        ]
        | TokenType.PUSH => [
            stack add: pointerValue
            pointerValue <- 0
            Success value: true
        ]
        | TokenType.POP => [
            pointerValue <- stack last
            stack removeAt: stack count - 1
            Success value: true
        ]
        | TokenType.IN => [
            pointerValue <- Console readChar
            Success value: true
        ]
        | TokenType.OUT => [
            (tape at: pointerPosition) toChar echo
            Success value: true
        ]
        | TokenType.READ => [
            pointerValue <- tape at: pointerPosition
            Success value: true
        ]
        | TokenType.WRITE => [
            tape at: pointerPosition put: pointerValue
            Success value: true
        ]
        | TokenType.READPOS => [
            pointerValue <- pointerPosition
            Success value: true
        ]
        | TokenType.LOOPB => [
            (tape at: pointerPosition) == 0 => [
                this readCommand
                [c > 0 || (cmd kind != TokenType.LOOPE)] whileTrue: [
                    cmd kind == TokenType.DPND => [LoopedDependencySet context: cmd kind toString loc: (Location token: pos)]
                    cmd kind == TokenType.LOOPB => [c <- c inc]
                    cmd kind == TokenType.LOOPE => [c <- c dec]
                    this readCommand
                ]
            ]
            Success value: true
        ]
        | TokenType.LOOPE => [
            (tape at: pointerPosition) != 0 => [
                this readLastCommand
                [c > 0 || (cmd kind != TokenType.LOOPB)] whileTrue: [
                    cmd kind == TokenType.DPND => [LoopedDependencySet context: cmd kind toString loc: (Location token: pos)]
                    cmd kind == TokenType.LOOPE => [c <- c inc]
                    cmd kind == TokenType.LOOPB => [c <- c dec]
                    this readLastCommand
                ]
            ]
            Success value: true
        ]
        | TokenType.COMMENT => [
            Success value: true
        ]
        | TokenType.END => [
            EndOfProgram value: true
        ]
        |=> InvalidCommand 
            context: cmd kind toString 
            loc: (Location token: pos)
            token: pos
    ]
    | BinaryCommand => [
        | cmd kind
        | TokenType.CREATELABEL => [
            labelMap at: cmd alias put: pointerPosition 
            Success value: true
        ]
        | TokenType.JUMPLABEL => [
            pointerPosition <- (labelMap at: cmd alias) unpackOrPANIC
            Success value: true
        ]
        | TokenType.DELETELABEL => [
            labelMap remove: cmd alias
            Success value: true
        ]
        | TokenType.DPNDCALL => [
            dpnd = (dpndMap at: cmd alias) unpackOrPANIC
            dpnd runDependency
        ]
        |=> InvalidCommand 
            context: cmd kind toString 
            loc: (Location token: pos)
            token: pos
    ]
    | DPND => [
        dpndMap at: cmd alias put: (File path: cmd fileName)
        Success value: true
    ]

    .readCommand
    ^result
]